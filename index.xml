<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent of Code 2018 - clj&#39;s Nim Solutions on AoC 2018 - clj&#39;s Nim Sulutions</title>
    <link>https://clj.github.io/aoc-2018/</link>
    <description>Recent content in Advent of Code 2018 - clj&#39;s Nim Solutions on AoC 2018 - clj&#39;s Nim Sulutions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 24 Jan 2019 23:03:59 +0100</lastBuildDate>
    
	<atom:link href="https://clj.github.io/aoc-2018/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day 10: The Stars Align</title>
      <link>https://clj.github.io/aoc-2018/day/10/</link>
      <pubDate>Fri, 25 Jan 2019 23:58:34 +0100</pubDate>
      
      <guid>https://clj.github.io/aoc-2018/day/10/</guid>
      <description>canvas { border: 1px solid white; margin: 8px; }  Day 10: The Stars Align For Day 10 &amp;ldquo;stars&amp;rdquo;, with a starting position and velocity, have to be animated until such a point where they spell out a message.
The core of this solution is obviously fairly simple:
proc move_sky*(points: var Points) = for i, point in points: points[i].x = point.x + point.vx points[i].y = point.y + point.vy Run that for the correct number of iterations and the &amp;ldquo;stars&amp;rdquo; will have aligned&amp;hellip; The actual move_sky function used in the solution is slightly bigger as it also calculates the bounds of the stars, which are used to detect when the stars have aligned and the message is readable.</description>
    </item>
    
    <item>
      <title>Day 13: Mine Cart Madness</title>
      <link>https://clj.github.io/aoc-2018/day/13/</link>
      <pubDate>Tue, 05 Feb 2019 23:38:07 +0100</pubDate>
      
      <guid>https://clj.github.io/aoc-2018/day/13/</guid>
      <description>Day 13: Mine Cart Madness For Day 13 we get to crash mine carts until there is only one remaining. As part of the original solution, if the terminal size is able to contain all the tracks, the progress of the mine are displayed. While it would be possible to pipe that output into the excellent asciinema Terminal Session Recorder it seemed like more fun to write an asciinema Nim library that can &amp;lsquo;record&amp;rsquo; and output asciicast v2 files.</description>
    </item>
    
    <item>
      <title>Day 15: Beverage Bandits</title>
      <link>https://clj.github.io/aoc-2018/day/15/</link>
      <pubDate>Wed, 20 Feb 2019 00:32:11 +0100</pubDate>
      
      <guid>https://clj.github.io/aoc-2018/day/15/</guid>
      <description>div.side-by-side { display: flex; flex-flow: row wrap; } div.side-by-side div { flex: 1; } canvas.terminal { margin: 8px; } .controls { width: 800px; display: flex; } .controls div { display: flex; flex-flow: column wrap; width: 100%; } input.attack { margin-left: 20px; margin-right: 20px; }  Day 15: Beverage Bandits Day 15 is about simulating a battle between the hot chocolate making Elves and the hot chocolate wanting Goblins.</description>
    </item>
    
    <item>
      <title>Day 17: Reservoir Research</title>
      <link>https://clj.github.io/aoc-2018/day/17/</link>
      <pubDate>Sun, 10 Feb 2019 23:08:14 +0100</pubDate>
      
      <guid>https://clj.github.io/aoc-2018/day/17/</guid>
      <description>video { width: 100%; max-height: 100%; height: auto; } #video { margin-left: 3em; margin-right: 3em; } .text-input-videos { } .text-input-videos ul { list-style: none; display: flex; flex-flow: row wrap; justify-content: center; padding: 0; margin: 0; } .text-input-videos li { margin: 2em; } .text-input-videos .caption { padding: 1em; text-align: center; }  Day 17: Reservoir Research For Day 17 we get an underground scan and are required to map the flow of water through sand and clay.</description>
    </item>
    
    <item>
      <title>Day 18: Settlers of The North Pole</title>
      <link>https://clj.github.io/aoc-2018/day/18/</link>
      <pubDate>Wed, 20 Feb 2019 23:00:00 +0100</pubDate>
      
      <guid>https://clj.github.io/aoc-2018/day/18/</guid>
      <description>.automaton { display: flex; } .controls { display: flex; flex-flow: column wrap; padding-left: 25px; } .controls  * { margin-bottom: 25px; } #generation { text-align: center; }  Day 18: Settlers of The North Pole Day 18 is cellular automaton day. The goal is to determine the resource value (| multiplied by #) after a certain number of iterations. For Part I the resource value after 10 iterations is the answer, which is easy.</description>
    </item>
    
  </channel>
</rss>